// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/jakubsacha/signature-collector/i18n"
	"github.com/jakubsacha/signature-collector/models"
	"time"
)

var location, _ = time.LoadLocation("Europe/Warsaw")
var now = time.Now().In(location)
var selectAllRendered = false

func SignaturePage(doc models.Document, requestID string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		selectAllRendered := false
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"container mx-auto px-4 py-8\"><div class=\"max-w-4xl mx-auto bg-white rounded-lg shadow-lg p-10\"><h1 class=\"text-2xl font-bold mb-6\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(doc.DocumentTitle)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/signature.templ`, Line: 17, Col: 67}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</h1><!-- Document Content --><div class=\"mb-8\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, section := range doc.DocumentContent {
			if !selectAllRendered && section.Type == "consent" {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"mb-4\"><label class=\"flex gap-3\"><span class=\"w-6 flex-none relative\"><input type=\"checkbox\" id=\"selectAllConsents\" class=\"form-checkbox w-4 h-4 text-blue-600 mt-1\"></span> <span class=\"text-gray-700 whitespace-pre-wrap flex-1\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(i18n.T("SelectAll", nil))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/signature.templ`, Line: 32, Col: 62}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span></label></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				selectAllRendered = true
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if section.Type == "text" {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"mb-2 py-2 whitespace-pre-wrap\"><p>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(section.Content)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/signature.templ`, Line: 40, Col: 48}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</p></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			} else if section.Type == "consent" {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"mb-4\"><label class=\"flex gap-3\"><span class=\"w-6 flex-none relative\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if section.ConsentMandatory != nil && *section.ConsentMandatory {
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<input type=\"hidden\" name=\"")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					var templ_7745c5c3_Var5 string
					templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs("consent_" + *section.ConsentType)
					if templ_7745c5c3_Err != nil {
						return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/signature.templ`, Line: 49, Col: 84}
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" value=\"true\"> ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<input type=\"checkbox\" name=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var6 string
				templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs("consent_" + *section.ConsentType)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/signature.templ`, Line: 55, Col: 80}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if section.ConsentDefault != nil && *section.ConsentDefault {
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" checked")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				if section.ConsentMandatory != nil && *section.ConsentMandatory {
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" disabled=\"disabled\" checked")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" class=\"form-checkbox w-4 h-4 text-blue-600 mt-1\"> ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if section.ConsentMandatory != nil && *section.ConsentMandatory {
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<span class=\"absolute top-1 left-0 w-4 h-4 bg-blue-500 text-white flex items-center justify-center font-bold text-center cursor-not-allowed rounded-sm\"><span class=\"text-sm text-center ml-[1px]\">&check;</span></span>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span> <span class=\"text-gray-700 whitespace-pre-wrap flex-1\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if section.ConsentMandatory != nil && *section.ConsentMandatory {
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<span class=\"text-red-500 font-bold\">*</span> ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				var templ_7745c5c3_Var7 string
				templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(section.Content)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/signature.templ`, Line: 75, Col: 49}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span></label></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div><!-- Signature Canvas --><div class=\"mb-8\"><h2 class=\"text-xl font-semibold mb-4\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(i18n.T("Signature", nil))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/signature.templ`, Line: 85, Col: 81}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</h2><div class=\"flex gap-2 items-center mb-2\"><h3 class=\"text-lg \">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(doc.SignerName)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/signature.templ`, Line: 88, Col: 39}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" <span class=\"text-gray-500\">(")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(doc.SignerEmail)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/signature.templ`, Line: 88, Col: 86}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(")</span></h3><span class=\"text-gray-500\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 string
		templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(now.Format("02.01.2006"))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/signature.templ`, Line: 91, Col: 46}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span></div><div class=\"border-2 border-gray-300 rounded-lg\"><canvas id=\"signatureCanvas\" class=\"w-full h-64 rounded cursor-crosshair\"></canvas></div><div class=\"mt-4 flex justify-end space-x-4\"><button id=\"clearButton\" class=\"bg-[#F6F0E4] text-black px-4 py-2 rounded-full hover:bg-[#F6F0E4] transition-colors\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 string
		templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(i18n.T("Clear", nil))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/signature.templ`, Line: 102, Col: 46}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</button> <button id=\"submitButton\" class=\"bg-[#FF7355] text-white px-4 py-2 rounded-full hover:bg-[#FE8460] transition-colors\" data-request-id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var13 string
		templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(requestID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/signature.templ`, Line: 107, Col: 51}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-device-id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var14 string
		templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(doc.DeviceID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/signature.templ`, Line: 108, Col: 53}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var15 string
		templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(i18n.T("Submit", nil))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `templates/signature.templ`, Line: 110, Col: 47}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</button></div></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSONScript("translations", map[string]string{
			"pleaseSignBeforeSubmitting": i18n.T("PleaseSignBeforeSubmitting", nil),
			"failedToSubmitSignature":    i18n.T("FailedToSubmitSignature", nil),
			"error":                      i18n.T("Error", nil),
			"signatureSubmitted":         i18n.T("SignatureSubmitted", nil),
			"complete":                   i18n.T("Complete", nil),
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\n        const translations = JSON.parse(document.getElementById('translations').textContent);\n\n        document.addEventListener('DOMContentLoaded', function() {\n            const canvas = document.getElementById('signatureCanvas');\n\n            // Select all consents\n            document.getElementById('selectAllConsents').addEventListener('change', function() {\n                document.querySelectorAll('input[type=\"checkbox\"][name^=\"consent_\"]').forEach(input => {\n                    input.checked = this.checked;\n                });\n            });\n\n            // Set canvas size\n            function resizeCanvas() {\n                const rect = canvas.getBoundingClientRect();\n                canvas.width = rect.width;\n                canvas.height = rect.height;\n            }\n            resizeCanvas();\n            window.addEventListener('resize', resizeCanvas);\n\n            // Initialize SignaturePad\n            const signaturePad = new SignaturePad(canvas);\n\n            // Clear button\n            document.getElementById('clearButton').addEventListener('click', () => {\n                signaturePad.clear();\n            });\n\n            // Submit button\n            document.getElementById('submitButton').addEventListener('click', async () => {\n                if (signaturePad.isEmpty()) {\n                    alert(translations.pleaseSignBeforeSubmitting);\n                    return;\n                }\n\n                const requestID = document.getElementById('submitButton').dataset.requestId;\n                const deviceID = document.getElementById('submitButton').dataset.deviceId;\n                const signatureData = signaturePad.toDataURL();\n\n                // Get all consent checkboxes\n                const consentInputs = document.querySelectorAll('input[type=\"checkbox\"][name^=\"consent_\"]');\n                const consents = Array.from(consentInputs).map(input => ({\n                    consent_type: input.name.replace('consent_', ''),\n                    granted: input.checked,\n                    timestamp: new Date().toISOString()\n                }));\n\n                try {\n                    const response = await fetch(`/documents/sign/${requestID}`, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({\n                            signature_data: signatureData,\n                            consents: consents\n                        }),\n                    });\n\n                    if (response.ok) {\n                        // Show confirmation message and return button\n                        const confirmationMessage = document.createElement('div');\n                        confirmationMessage.className = 'text-center mt-8';\n                        confirmationMessage.innerHTML = `\n                            <p class=\"text-lg font-semibold mb-4\">${translations.signatureSubmitted}</p>\n                            <button \n                                id=\"returnButton\"\n                                class=\"bg-[#FF7355] text-white px-4 py-2 rounded-full hover:bg-[#FE8460] transition-colors\"\n                            >\n                                ${translations.complete}\n                            </button>\n                        `;\n                        document.querySelector('.container div').replaceChildren(confirmationMessage);\n\n                        // Add event listener to the return button\n                        document.getElementById('returnButton').addEventListener('click', () => {\n                            window.location.href = '/documents/' + deviceID;\n                        });\n                    } else {\n                        console.error(translations.failedToSubmitSignature);\n                    }\n                } catch (error) {\n                    console.error(translations.error, error);\n                }\n            });\n        });\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
